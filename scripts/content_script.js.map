{
  "version": 3,
  "sources": ["../node_modules/.pnpm/@medv+finder@3.2.0/node_modules/@medv/finder/finder.js", "lib.mjs", "model.mjs", "digest.mjs", "content.js"],
  "sourcesContent": ["// License: MIT\n// Author: Anton Medvedev <anton@medv.io>\n// Source: https://github.com/antonmedv/finder\nlet config;\nlet rootDocument;\nlet start;\nexport function finder(input, options) {\n    start = new Date();\n    if (input.nodeType !== Node.ELEMENT_NODE) {\n        throw new Error(`Can't generate CSS selector for non-element node type.`);\n    }\n    if ('html' === input.tagName.toLowerCase()) {\n        return 'html';\n    }\n    const defaults = {\n        root: document.body,\n        idName: (name) => true,\n        className: (name) => true,\n        tagName: (name) => true,\n        attr: (name, value) => false,\n        seedMinLength: 1,\n        optimizedMinLength: 2,\n        threshold: 1000,\n        maxNumberOfTries: 10000,\n        timeoutMs: undefined,\n    };\n    config = { ...defaults, ...options };\n    rootDocument = findRootDocument(config.root, defaults);\n    let path = bottomUpSearch(input, 'all', () => bottomUpSearch(input, 'two', () => bottomUpSearch(input, 'one', () => bottomUpSearch(input, 'none'))));\n    if (path) {\n        const optimized = sort(optimize(path, input));\n        if (optimized.length > 0) {\n            path = optimized[0];\n        }\n        return selector(path);\n    }\n    else {\n        throw new Error(`Selector was not found.`);\n    }\n}\nfunction findRootDocument(rootNode, defaults) {\n    if (rootNode.nodeType === Node.DOCUMENT_NODE) {\n        return rootNode;\n    }\n    if (rootNode === defaults.root) {\n        return rootNode.ownerDocument;\n    }\n    return rootNode;\n}\nfunction bottomUpSearch(input, limit, fallback) {\n    let path = null;\n    let stack = [];\n    let current = input;\n    let i = 0;\n    while (current) {\n        const elapsedTime = new Date().getTime() - start.getTime();\n        if (config.timeoutMs !== undefined && elapsedTime > config.timeoutMs) {\n            throw new Error(`Timeout: Can't find a unique selector after ${elapsedTime}ms`);\n        }\n        let level = maybe(id(current)) ||\n            maybe(...attr(current)) ||\n            maybe(...classNames(current)) ||\n            maybe(tagName(current)) || [any()];\n        const nth = index(current);\n        if (limit == 'all') {\n            if (nth) {\n                level = level.concat(level.filter(dispensableNth).map((node) => nthChild(node, nth)));\n            }\n        }\n        else if (limit == 'two') {\n            level = level.slice(0, 1);\n            if (nth) {\n                level = level.concat(level.filter(dispensableNth).map((node) => nthChild(node, nth)));\n            }\n        }\n        else if (limit == 'one') {\n            const [node] = (level = level.slice(0, 1));\n            if (nth && dispensableNth(node)) {\n                level = [nthChild(node, nth)];\n            }\n        }\n        else if (limit == 'none') {\n            level = [any()];\n            if (nth) {\n                level = [nthChild(level[0], nth)];\n            }\n        }\n        for (let node of level) {\n            node.level = i;\n        }\n        stack.push(level);\n        if (stack.length >= config.seedMinLength) {\n            path = findUniquePath(stack, fallback);\n            if (path) {\n                break;\n            }\n        }\n        current = current.parentElement;\n        i++;\n    }\n    if (!path) {\n        path = findUniquePath(stack, fallback);\n    }\n    if (!path && fallback) {\n        return fallback();\n    }\n    return path;\n}\nfunction findUniquePath(stack, fallback) {\n    const paths = sort(combinations(stack));\n    if (paths.length > config.threshold) {\n        return fallback ? fallback() : null;\n    }\n    for (let candidate of paths) {\n        if (unique(candidate)) {\n            return candidate;\n        }\n    }\n    return null;\n}\nfunction selector(path) {\n    let node = path[0];\n    let query = node.name;\n    for (let i = 1; i < path.length; i++) {\n        const level = path[i].level || 0;\n        if (node.level === level - 1) {\n            query = `${path[i].name} > ${query}`;\n        }\n        else {\n            query = `${path[i].name} ${query}`;\n        }\n        node = path[i];\n    }\n    return query;\n}\nfunction penalty(path) {\n    return path.map((node) => node.penalty).reduce((acc, i) => acc + i, 0);\n}\nfunction unique(path) {\n    const css = selector(path);\n    switch (rootDocument.querySelectorAll(css).length) {\n        case 0:\n            throw new Error(`Can't select any node with this selector: ${css}`);\n        case 1:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction id(input) {\n    const elementId = input.getAttribute('id');\n    if (elementId && config.idName(elementId)) {\n        return {\n            name: '#' + CSS.escape(elementId),\n            penalty: 0,\n        };\n    }\n    return null;\n}\nfunction attr(input) {\n    const attrs = Array.from(input.attributes).filter((attr) => config.attr(attr.name, attr.value));\n    return attrs.map((attr) => ({\n        name: `[${CSS.escape(attr.name)}=\"${CSS.escape(attr.value)}\"]`,\n        penalty: 0.5,\n    }));\n}\nfunction classNames(input) {\n    const names = Array.from(input.classList).filter(config.className);\n    return names.map((name) => ({\n        name: '.' + CSS.escape(name),\n        penalty: 1,\n    }));\n}\nfunction tagName(input) {\n    const name = input.tagName.toLowerCase();\n    if (config.tagName(name)) {\n        return {\n            name,\n            penalty: 2,\n        };\n    }\n    return null;\n}\nfunction any() {\n    return {\n        name: '*',\n        penalty: 3,\n    };\n}\nfunction index(input) {\n    const parent = input.parentNode;\n    if (!parent) {\n        return null;\n    }\n    let child = parent.firstChild;\n    if (!child) {\n        return null;\n    }\n    let i = 0;\n    while (child) {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            i++;\n        }\n        if (child === input) {\n            break;\n        }\n        child = child.nextSibling;\n    }\n    return i;\n}\nfunction nthChild(node, i) {\n    return {\n        name: node.name + `:nth-child(${i})`,\n        penalty: node.penalty + 1,\n    };\n}\nfunction dispensableNth(node) {\n    return node.name !== 'html' && !node.name.startsWith('#');\n}\nfunction maybe(...level) {\n    const list = level.filter(notEmpty);\n    if (list.length > 0) {\n        return list;\n    }\n    return null;\n}\nfunction notEmpty(value) {\n    return value !== null && value !== undefined;\n}\nfunction* combinations(stack, path = []) {\n    if (stack.length > 0) {\n        for (let node of stack[0]) {\n            yield* combinations(stack.slice(1, stack.length), path.concat(node));\n        }\n    }\n    else {\n        yield path;\n    }\n}\nfunction sort(paths) {\n    return [...paths].sort((a, b) => penalty(a) - penalty(b));\n}\nfunction* optimize(path, input, scope = {\n    counter: 0,\n    visited: new Map(),\n}) {\n    if (path.length > 2 && path.length > config.optimizedMinLength) {\n        for (let i = 1; i < path.length - 1; i++) {\n            if (scope.counter > config.maxNumberOfTries) {\n                return; // Okay At least I tried!\n            }\n            scope.counter += 1;\n            const newPath = [...path];\n            newPath.splice(i, 1);\n            const newPathKey = selector(newPath);\n            if (scope.visited.has(newPathKey)) {\n                return;\n            }\n            if (unique(newPath) && same(newPath, input)) {\n                yield newPath;\n                scope.visited.set(newPathKey, true);\n                yield* optimize(newPath, input, scope);\n            }\n        }\n    }\n}\nfunction same(path, input) {\n    return rootDocument.querySelector(selector(path)) === input;\n}\n", "export const allowedActions = {\n  toggleVisibility: \"toggleVisibility\",\n  toggleAnnotate: \"toggleAnnotate\",\n  toggleDeannotate: \"toggleDeannotate\",\n};\n\nexport const customCSSClasses = [\"hovering\", \"hidden-hover\"];\n", "import { finder } from \"@medv/finder\";\nimport { allowedActions, customCSSClasses } from \"./lib.mjs\";\n\n/**\n * Represents a hide action.\n */\nexport class Hidden {\n  constructor() {\n    // This export class represents a hidden state; no properties needed.\n  }\n\n  toJSON() {\n    return [\n      {\n        variant: \"hidden\",\n      },\n    ];\n  }\n}\n\n/**\n * Represents an annotation.\n */\nexport class Annotation {\n  /**\n   * @param {string} text - The annotation text.\n   */\n  constructor(text) {\n    this.text = text;\n  }\n\n  toJSON() {\n    return {\n      variant: \"annotation\",\n      data: undefined,\n    };\n  }\n}\n\n/**\n * Represents a font change.\n */\nexport class FontChange {\n  /**\n   * @param {string} font - The new font name.\n   */\n  constructor(font) {\n    this.font = font;\n  }\n}\n\n/**\n * Represents a content change.\n */\nexport class ContentChange {\n  /**\n   * @param {string} content - The new content.\n   */\n  constructor(content) {\n    this.content = content;\n  }\n}\n\n/**\n * Modifications container type\n */\nexport class CompositeModification {\n  // static properties = [\"annotation\", \"fontChange\", \"contentChange\"];\n  static properties = [\"annotation\"];\n\n  constructor() {\n    for (const p of CompositeModification.properties) {\n      this[p] = undefined;\n    }\n    // this.annotation = null;\n    // this.fontChange = null;\n    // this.contentChange = null;\n  }\n\n  updateAnnotation(annotation) {\n    this.annotation = annotation;\n  }\n\n  /* TODO\n  updateFontChange(fontChange) {\n    this.fontChange = fontChange;\n  }\n  updateContentChange(contentChange) {\n    this.contentChange = contentChange;\n  }\n  */\n\n  /**\n\n   * @param {string} prop_name\n   * @returns {({variant: string, data: undefined | Object})}\n   */\n  /*\n   stringify_property(prop_name) {\n    return {\n      variant: prop_name,\n      data: undefined,\n    };\n    // TODO data: this[prop_name]\n  } */\n\n  toJSON() {\n    let json = [];\n    let props = CompositeModification.properties.filter(\n      (prop_name) => this[prop_name],\n    );\n    props.forEach((prop_name) => json.push(JSON.stringify(this[prop_name])));\n  }\n}\n\n/**\n * Container for changes made to a particular element.\n */\nexport class NodeModification {\n  /**\n   * Note: Constructor should NOT be called outside of this file, everything should be done through PageModifications\n   * @param {Node} node - The DOM node that has been modified.\n   * @param {Hidden | CompositeModification} modifications - The modifications made to the node.\n   */\n  constructor(node) {\n    this.node = node;\n    this.modifications = new CompositeModification();\n    // TODO: Remove custom export class names that allow selection of elements\n    // (e.g blue border on hover)\n  }\n\n  /** @returns {boolean} */\n  isHidden() {\n    return this.modifications instanceof Hidden;\n  }\n\n  setHidden() {\n    this.modifications = new Hidden();\n    // TODO set UI modifications only within data structure and not outside\n    this.node.classList.add(\"hidden-hover\");\n  }\n\n  setCompositeModification() {\n    this.node.classList.remove(\"hidden-hover\");\n    this.modifications = new CompositeModification();\n  }\n\n  toggleHidden() {\n    // debugger;\n    console.log(\"Before Toggle:\", this, this.isHidden());\n    this.isHidden() ? this.setCompositeModification() : this.setHidden();\n    console.log(\"After Toggle:\", this, this.isHidden());\n  }\n\n  /**\n   * Add / Remove Annotation\n   * @param {Annotation | null} annotation\n   */\n  updateAnnotation(annotation) {\n    if (this.isHidden()) {\n      throw new Error(\"Trying to annotate a hidden element.\");\n    }\n    this.modifications.updateAnnotation(annotation);\n  }\n\n  isEmpty() {\n    if (this.modifications.constructor.name == CompositeModification.name) {\n      for (const prop_name of CompositeModification.properties) {\n        if (this.modifications[prop_name] !== undefined) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  toJSON() {\n    let activeCustomCSS = customCSSClasses.filter((cl) =>\n      this.node.classList.contains(cl),\n    );\n\n    // remove the extension-added CSS\n    this.node.classList.remove(...customCSSClasses);\n\n    // serialize the modification\n    let json_obj = {\n      node: finder(this.node),\n      // TODO: modifications: null (for unimplemented/empty mods);\n      modifications: this.modifications.toJSON(),\n    };\n\n    // add back the extension-added CSS\n    console.log(this.node);\n    this.node.classList.add(...activeCustomCSS);\n\n    if (json_obj.modifications !== undefined) {\n      return json_obj;\n    }\n  }\n  /* TODO add further modifications as needed */\n}\n/**\n * Represents all modifications to a particular page.\n */\nexport class PageModifications {\n  /**\n   * @param {string} url - The URL of the page.\n   */\n  constructor(url) {\n    this.url = url;\n    /** @type {NodeModification[]} nodeModifications - An array of node modifications. */\n    this.nodeModifications = [];\n  }\n\n  /**\n   * Add a new element modification to the page\n   * @param {Node} node\n   */\n  addNodeModification(node) {\n    const nodeModification = new NodeModification(node);\n    this.nodeModifications.push(nodeModification);\n    return nodeModification;\n  }\n\n  /**\n   * Return modifications to a given node\n   * @param {Node} node\n   * @returns {NodeModification | undefined}\n   */\n  getNodeModification(node) {\n    return this.nodeModifications.find(\n      (saved_nodeModication) => saved_nodeModication.node === node,\n    );\n  }\n\n  /* TODO handle further modifications as introduced */\n\n  /**\n   * Check if modifications to a given node already exists,\n   * update it if yes, otherwise add it to nodeModifcations\n   * @param {Node} node\n   * @param {({action: string, data: null | Annotation})} modification\n   */\n  setNodeModification(node, modification) {\n    if (\n      modification === undefined ||\n      modification === null ||\n      !(\n        modification.hasOwnProperty(\"action\") &&\n        modification.hasOwnProperty(\"data\")\n      )\n    ) {\n      throw new Error(\"PageModifications: Malformed Modification attempt.\");\n    }\n\n    let nodeModification = this.getNodeModification(node);\n    if (nodeModification === undefined) {\n      nodeModification = this.addNodeModification(node);\n    }\n\n    switch (modification.action) {\n      case allowedActions.toggleVisibility:\n        nodeModification.toggleHidden();\n        break;\n      case allowedActions.toggleDeannotate:\n        nodeModification.updateAnnotation(null);\n        break;\n      case allowedActions.toggleAnnotate:\n        nodeModification.updateAnnotation(modification.data);\n    }\n\n    // TODO\n    // Figure out a way to get the modification payload\n    // In a way that gives the content script\n    // an idea of the current state of the modification\n    // To simultaneously ensure no invalid actions are ocurring.\n  }\n\n  // toJSON() {\n  //   let mods = this.nodeModifications\n  //     .map((mod) => JSON.stringify(mod, null, 2))\n  //     .filter((json) => json !== \"null\");\n\n  //   return {\n  //     url: JSON.stringify(this.url),\n  //     nodeModifications: mods,\n  //   };\n  // }\n\n  /** Stringifies the current state of the modifications object,\n  removes empty modifications\n  * @returns {string}\n  */\n  generateJSON() {\n    // get rid of empty NodeModifications\n    let json = JSON.stringify(\n      {\n        ...this,\n        nodeModifications: this.nodeModifications.filter(\n          (nodeMod) => !nodeMod.isEmpty(),\n        ),\n      },\n      null,\n      2,\n    );\n    return json;\n  }\n}\n\n/**\n *\n * @param {string} jsonString\n * @returns {PageModifications | Error}\n */\nexport function loadModifications(jsonString) {\n  try {\n    let obj = JSON.parse(jsonString);\n    const page_mods = new PageModifications(obj.url);\n\n    for (const nodeModObj of obj.nodeModifications) {\n      const node = document.querySelector(nodeModObj.node);\n\n      for (const modObj of nodeModObj.modifications) {\n        let modification = {\n          action: \"\",\n          data: null,\n        };\n\n        switch (modObj.variant) {\n          case \"hidden\":\n            modification.action = allowedActions.toggleVisibility;\n            page_mods.setNodeModification(node, modification);\n            break;\n          default:\n            throw new Error(\"unrecognised modification variant\");\n        }\n      }\n    }\n    console.log(\"Reconstructed PageMod obj: \", page_mods);\n\n    return page_mods;\n  } catch (err) {\n    console.error(err);\n    throw new Error(\"Malformed JSON Modifications object.\");\n  }\n}\n", "/** Generate a Hash of a String\n * @param {string} input - string to be hashed\n * @returns {Promise<string>} - the hexadecimal hashed string\n */\nexport async function generateHash(input) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(input);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n  return hashHex;\n}\n", "// Content Script: Works only within the context of a particular webpage\n\n// Annotation UI Backend\n// ---------------------------------------------------------------------\n// Needs to pass messages to communicate with the background script\n// ---------------------------------------------------------------------\n\nimport * as model from \"./model.mjs\";\nimport { allowedActions } from \"./lib.mjs\";\nimport { generateHash } from \"./digest.mjs\";\n\n/*\n *\n * @param {Node} node\n * @returns {string}\nfunction getNodeLocator(node) {\n  const uniqueDOMElements = [\"body\"];\n  // check node is valid\n  // if node has id then great\n  // else\n  //  relative position from element with id\n  //  relative position from unique dom element\n  //  CSS locator\n  //  Xpath Locator\n  return \"\";\n}\n*/\n\n// ---------------------------------------------------------------------\nconst getURL = () =>\n  window.location.protocol +\n  \"//\" +\n  window.location.hostname +\n  (window.location.port ? \":\" + window.location.port : \"\") +\n  window.location.pathname;\n\n// Event Listeners for Setting / Changing Modifications\nlet page_modifications = new model.PageModifications(getURL());\n\nconst toggleHoveringStyle = (e) => {\n  // debugger;\n  e.preventDefault();\n  e.target.classList.toggle(\"hovering\");\n};\n\nconst toggleHidden = (e) => {\n  e.preventDefault();\n  const node = e.target;\n  // node.classList.toggle(\"hidden-hover\");\n\n  const modification = {\n    action: allowedActions.toggleVisibility,\n    data: null,\n  };\n  console.log(\"Node:\", node);\n  console.log(\"Modification:\", modification);\n  // console.log(\"Current Page Modifications:\", page_modifications);\n  page_modifications.setNodeModification(node, modification);\n};\n\nconst addAnnotation = (e) => {\n  e.preventDefault();\n  const ann = document.createElement(\"p\");\n  ann.innerHTML = \"Sample Text Annotation\";\n  ann.className = \"custom-annotation\";\n  e.target.insertAdjacentElement(\"afterend\", ann);\n};\n\n// TODO\n// 1. ownership of the annotation should belong to one the webpage's original node\n//  as saved in the data structure\n//  Currently, it is just a floating div\n// 2. Each element should be limited to having one annotation.\n//\n// Confirm if this is a good idea\nconst deleteAnnotation = (e) => {\n  e.preventDefault();\n  const elem = e.target;\n  if (elem.classList.contains(\"custom-annotation\")) {\n    elem.remove();\n  }\n};\n\n// --------------------------------------------------------------\n\n// UI States\n\n/** @type {string | undefined} */\nlet current_action = undefined;\n\n/** @type {[string, EventListener][]} */\nlet current_listeners = [];\n\n// assume: only valid actions are received from the background script\nconst handle_action = (action) => {\n  // debugger;\n  const unsetAction = () => {\n    // console.log(current_listeners);\n    for (const [eventName, listener] of current_listeners) {\n      document.removeEventListener(eventName, listener);\n    }\n    current_action = undefined;\n  };\n\n  const setAction = (action) => {\n    current_action = action;\n    // console.log(current_listeners);\n    current_listeners = [\n      [\"mouseover\", toggleHoveringStyle],\n      [\"mouseout\", toggleHoveringStyle],\n    ];\n\n    switch (action) {\n      case \"toggleAnnotate\":\n        current_listeners.push([\"click\", addAnnotation]);\n        break;\n\n      case \"toggleDeannotate\":\n        current_listeners.push([\"click\", deleteAnnotation]);\n        break;\n\n      case \"toggleVisiblity\":\n        current_listeners.push([\"click\", toggleHidden]);\n        break;\n\n      default:\n        break;\n    }\n\n    for (const [eventName, listener] of current_listeners) {\n      document.addEventListener(eventName, listener);\n    }\n  };\n\n  // when some action was active (not including the current one),\n  // deactivate the other action and activate the current one\n  if (current_action !== undefined && current_action !== action) {\n    unsetAction();\n    setAction(action);\n  } else if (current_action === action) {\n    unsetAction();\n  } else {\n    setAction(action);\n  }\n};\n\n// 1. TODO Ensure PageModifications correctly reflects all modifications in real-time\n// Then save it to a stringified JSON object\n//\n// 2. TODO Save the JSON object to chrome.storage\n// so that all extension contexts can access it\n//\n// 3. TODO Load from chrome.storage => JSON => PageModifications\n// This should never be in an invalid state.\n\n// const generateModifications = () => {\n//   return JSON.stringify(page_modifications, null, 2);\n// };\n\nconst logCurrentModifications = (mods) => {\n  console.log(\"Current Modifications State:\", page_modifications);\n  console.log(mods);\n};\n\n/** @param {string} key\n * @param {string} value */\nconst setSavedModifications = async (key, value) => {\n  try {\n    await chrome.storage.local.set({\n      [key]: value,\n    });\n  } catch (e) {\n    console.error(e);\n    alert(\"Unsuccessful save\");\n  }\n  alert(\"Saved successfully\");\n};\n\n/** @param {string} key - hash of the url */\nconst getSavedModifications = async (key) => {\n  try {\n    const storedModification = await chrome.storage.local.get([key]);\n    if (storedModification[key]) {\n      alert(\"Found modification!\");\n      return storedModification[key];\n    } else {\n      alert(\"Modification not found :/\");\n    }\n  } catch {\n    alert(\"Error while retrieving modification from Extension Storage\");\n  }\n};\n\n// Figure out how to cache the hash so that\n// const hash = generateHash(page_modifications.url);\n\nconst saveModifications = async () => {\n  const hash = await generateHash(page_modifications.url);\n  const mods = page_modifications.generateJSON();\n  logCurrentModifications(mods);\n  await setSavedModifications(hash, mods);\n  console.log(\"URL Hash:\", hash);\n};\n\nconst fetchModifications = async () => {\n  const hash = await generateHash(page_modifications.url);\n  const mods = await getSavedModifications(hash);\n  if (mods) {\n    console.log(\"Retrieved Mods:\", mods);\n    try {\n      page_modifications = model.loadModifications(mods);\n      alert(\"Modifications Loaded.\");\n    } catch (error) {\n      console.error(\"Error loading modifications:\", error);\n      page_modifications = new model.PageModifications(getURL());\n      alert(\"Failed to load modifications.\");\n    }\n  }\n};\n\nchrome.runtime.onMessage.addListener(async (request) => {\n  console.log(request.action);\n  if (request.action == \"saveModifications\") {\n    await saveModifications();\n  } else if (request.action == \"loadModifications\") {\n    await fetchModifications();\n  } else {\n    handle_action(request.action);\n  }\n});\n\n// Load modifications when the extension first gets loaded into the webpage\nfetchModifications();\n"],
  "mappings": "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",
  "names": ["attr", "action"]
}
